#!/usr/bin/env node

/**
 * License Attribution Generator
 * 
 * This script generates an attribution file for all npm dependencies
 * to ensure proper legal compliance and credit to open-source authors.
 */

const fs = require('fs');
const path = require('path');

function generateAttributions() {
  try {
    // Read the licenses.json file generated by 'npm ls --json'
    const licensesPath = path.join(__dirname, '..', 'licenses.json');
    
    if (!fs.existsSync(licensesPath)) {
      console.error('licenses.json not found. Run "npm run licenses" first.');
      process.exit(1);
    }

    const licensesData = JSON.parse(fs.readFileSync(licensesPath, 'utf8'));
    
    // Extract dependencies
    const dependencies = licensesData.dependencies || {};
    
    // Group by license type
    const licenseGroups = {};
    const attributions = [];
    
    function processPackage(name, info, depth = 0) {
      if (!info) return;
      
      const license = info.license || 'Unknown';
      const version = info.version || 'Unknown';
      const description = info.description || '';
      const homepage = info.homepage || '';
      const repository = info.repository?.url || '';
      
      // Add to license groups
      if (!licenseGroups[license]) {
        licenseGroups[license] = [];
      }
      licenseGroups[license].push({
        name,
        version,
        description,
        homepage,
        repository
      });
      
      // Process nested dependencies
      if (info.dependencies) {
        Object.entries(info.dependencies).forEach(([depName, depInfo]) => {
          processPackage(depName, depInfo, depth + 1);
        });
      }
    }
    
    // Process all dependencies
    Object.entries(dependencies).forEach(([name, info]) => {
      processPackage(name, info);
    });
    
    // Generate attribution markdown
    let content = `# Third-Party Software Attributions

This project uses the following open-source software libraries. We acknowledge and thank the authors and contributors of these projects.

*Generated on: ${new Date().toISOString()}*

## License Summary

`;

    // License summary
    Object.entries(licenseGroups).forEach(([license, packages]) => {
      content += `- **${license}**: ${packages.length} packages\n`;
    });
    
    content += `\n## Dependencies by License\n\n`;
    
    // Group packages by license
    Object.entries(licenseGroups)
      .sort(([a], [b]) => a.localeCompare(b))
      .forEach(([license, packages]) => {
        content += `### ${license} License\n\n`;
        
        packages
          .sort((a, b) => a.name.localeCompare(b.name))
          .forEach(pkg => {
            content += `#### ${pkg.name} (v${pkg.version})\n`;
            if (pkg.description) {
              content += `- **Description**: ${pkg.description}\n`;
            }
            if (pkg.homepage) {
              content += `- **Homepage**: ${pkg.homepage}\n`;
            }
            if (pkg.repository) {
              content += `- **Repository**: ${pkg.repository}\n`;
            }
            content += `- **License**: ${license}\n\n`;
          });
      });
    
    content += `## Notes

- All packages are used in compliance with their respective licenses
- This file is automatically generated from package dependencies
- For complete license texts, refer to individual package documentation
- If you have questions about licensing, please contact the project maintainers

---

*Total packages: ${Object.values(licenseGroups).flat().length}*
`;

    // Write the attribution file
    const outputPath = path.join(__dirname, '..', 'THIRD-PARTY-LICENSES.md');
    fs.writeFileSync(outputPath, content);
    
    console.log(`âœ… Generated attribution file: ${outputPath}`);
    console.log(`ðŸ“¦ Total packages processed: ${Object.values(licenseGroups).flat().length}`);
    console.log(`ðŸ“‹ License types found: ${Object.keys(licenseGroups).length}`);
    
    // Display license summary
    console.log('\nðŸ“Š License Summary:');
    Object.entries(licenseGroups)
      .sort(([,a], [,b]) => b.length - a.length)
      .forEach(([license, packages]) => {
        console.log(`   ${license}: ${packages.length} packages`);
      });
    
  } catch (error) {
    console.error('Error generating attributions:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  generateAttributions();
}

module.exports = { generateAttributions };
